from custom import method
from parseInvesting import ParseQuotation
import datetime

class ConvertInMessage:

    @staticmethod
    def convertListIdea(arListIdea = dict):
        message = '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å: \n'

        for idea in arListIdea:
            typeIdea = '–ü—Ä–æ–¥–∞–∂–∞' if (float(idea['PRICE_SELL']) - float(idea['PRICE_BUY']) < 0) else '–ü–æ–∫—É–ø–∫–∞'
            typeSmile = 'üìâ' if typeIdea in '–ü—Ä–æ–¥–∞–∂–∞' else 'üìà'

            message += f'{typeSmile} –ò–¥–µ—è: {typeIdea} –∞–∫—Ü–∏–∏ {idea["NAME"]} {typeSmile} \n'

            if typeIdea in '–ü–æ–∫—É–ø–∫–∞':
                message += f'       üí∞–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {idea["PRICE_BUY"]};\n'
                message += f'       üí∞–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {idea["PRICE_SELL"]};\n'
            else:
                message += f'       üí∞–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {idea["PRICE_BUY"]};\n'
                message += f'       üí∞–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {idea["PRICE_CELL"]};\n'
            message += f'       üí∏–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {idea["INCOME"]}%;\n'
            message += f'       üíµ–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: {idea["PRICE_RELEASE"]};\n'
            message += f'       üìÖ–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏: {idea["DATE_CREATE"]};\n\n'

        return message

    @staticmethod
    def getInfoMessageQuotation(quotation = None):
        """
        Getting information about quote for Telegram bot
        :param quotation: Quote Information
        :return: Message string
        """

        typeStatusText = '—Å–Ω–∏–∂–∞–µ—Ç—Å—è' if quotation['ChangeDayPercent'] < 0 else '—Ä–∞—Å—Ç—ë—Ç'

        messageTextInfo = '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ' + quotation['Name'] + ' —Å–µ–π—á–∞—Å –∫–æ—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ ' + \
                          str(quotation[
                                  'Value']) + f' {method.getTextByCount(int(quotation["Value"]), ["–ø—É–Ω–∫—Ç", "–ø—É–Ω–∫—Ç–∞", "–ø—É–Ω–∫—Ç–æ–≤"])}' + \
                          ', –∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç ' + typeStatusText + ' –Ω–∞ ' + str(quotation['ChangeDayValue']) + \
                          ' –ø—É–Ω–∫—Ç–∞ (' + str(quotation["ChangeDayPercent"]) + '%)'

        return messageTextInfo

    @staticmethod
    def getFullMessageSituation(typeMarket = None, marketObject = None):
        """
        Getting information about the quotes of a certain market for the telegram bot
        :param typeMarket: Market type, RUSSIA or USA
        :param marketObject: Market object
        :return: Message string
        """

        now = datetime.datetime.now()
        nowTime = now.strftime('%H:%M')

        if typeMarket == 'RUSSIA':
            index = ParseQuotation.getQuotationByName('–ú–ú–í–ë')
            indexName = '–∏–Ω–¥–µ–∫—Å –ú–æ—Å–±–∏—Ä–∂–∏'
            quotations = ParseQuotation.getQuotationsMOEX()

        elif typeMarket == 'USA':
            index = ParseQuotation.getQuotationByName('S&P 500')
            indexName = '–∏–Ω–¥–µ–∫—Å S&P 500'
            quotations = ParseQuotation.getQuotationSP500()
        market = marketObject

        typeStatusText = '—Å–Ω–∏–∂–∞–µ—Ç—Å—è' if index['ChangeDayValue'] < 0 else '—Ä–∞—Å—Ç—ë—Ç'

        messageMoexSituation = "–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ " + nowTime + f", {indexName} {typeStatusText} –Ω–∞ " + str(index['ChangeDayValue']) + \
                               f" –ø—É–Ω–∫—Ç–æ–≤ ({str(index['ChangeDayPercent'])}%) –∏ —Ç–µ–∫—É—â–µ–µ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {str(index['Value'])} –ø—É–Ω–∫—Ç–æ–≤.\n"

        messageTextLeaderFall = "\n–õ–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è: \n"
        for i in range(0, 5):
            stocks = sorted(quotations, key=lambda item: item['ChangeDayPercent'])[i]
            messageTextLeaderFall += stocks[
                                         'StockName'] + f" - —Ü–µ–Ω–∞ {str(stocks['Value'])} —Ä—É–±. ({str(stocks['ChangeDayPercent'])}%).\n"

        messageTextLeaderGrowth = "\n–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞: \n"
        for i in range(0, 5):
            stocks = sorted(quotations, reverse=True, key=lambda item: item['ChangeDayPercent'])[i]
            messageTextLeaderGrowth += stocks[
                                           'StockName'] + f" - —Ü–µ–Ω–∞ {str(stocks['Value'])} —Ä—É–±. ({str(stocks['ChangeDayPercent'])}%).\n"

        messageTextActualCurrent = "\n–¶–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ü–∏–π: \n"
        for i in range(len(quotations)):
            stocks = quotations[i]
            if method.in_array(stocks['StockName'], market.currentStock):
                messageTextActualCurrent += stocks[
                                                'StockName'] + f" - —Ü–µ–Ω–∞ {str(stocks['Value'])} —Ä—É–±. ({str(stocks['ChangeDayPercent'])}%).\n"

        resultStr = messageMoexSituation + messageTextLeaderFall + messageTextLeaderGrowth + messageTextActualCurrent

        return resultStr

